local GuiLibrary = {}
GuiLibrary.__index = GuiLibrary

-- Lightweight theme configuration
local Theme = {
    Background = Color3.fromRGB(20, 20, 25),
    Foreground = Color3.fromRGB(30, 30, 35),
    Accent = Color3.fromRGB(150, 50, 255),
    Text = Color3.fromRGB(240, 240, 240),
    Border = Color3.fromRGB(50, 50, 60),
    Highlight = Color3.fromRGB(180, 80, 255)
}

local function Create(class, props)
    local obj = Instance.new(class)
    for k,v in pairs(props) do
        if k ~= "Parent" then
            obj[k] = v
        end
    end
    obj.Parent = props.Parent
    return obj
end

-- Main constructor with auto-placement
function GuiLibrary.new(title)
    local self = setmetatable({}, GuiLibrary)
    
    self.ScreenGui = Create("ScreenGui", {
        Name = "ExploitHubGUI",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global
    })
    
    -- Auto-position based on existing GUIs
    local existingGuis = game:GetService("CoreGui"):GetChildren()
    local xPos = 0.02 + (#existingGuis * 0.02)
    
    self.MainFrame = Create("Frame", {
        Name = "MainWindow",
        BackgroundColor3 = Theme.Background,
        BorderColor3 = Theme.Border,
        Position = UDim2.new(xPos, 0, 0.02, 0),
        Size = UDim2.new(0, 350, 0, 400),
        Parent = self.ScreenGui,
        Active = true
    })
    
    -- Draggable title bar
    self.TitleBar = Create("Frame", {
        Name = "TitleBar",
        BackgroundColor3 = Theme.Foreground,
        Size = UDim2.new(1, 0, 0, 25),
        Parent = self.MainFrame
    })
    
    self.TitleLabel = Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Size = UDim2.new(0.7, 0, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = title or "Exploit Hub",
        TextColor3 = Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = self.TitleBar
    })
    
    -- Close button with better visual feedback
    self.CloseButton = Create("TextButton", {
        Name = "CloseButton",
        BackgroundColor3 = Color3.fromRGB(200, 50, 50),
        Position = UDim2.new(1, -25, 0, 0),
        Size = UDim2.new(0, 25, 1, 0),
        Text = "X",
        TextColor3 = Theme.Text,
        Parent = self.TitleBar
    })
    
    -- Tab system with dynamic resizing
    self.TabButtons = Create("Frame", {
        Name = "TabButtons",
        BackgroundColor3 = Theme.Foreground,
        Position = UDim2.new(0, 0, 0, 25),
        Size = UDim2.new(1, 0, 0, 30),
        Parent = self.MainFrame
    })
    
    Create("UIListLayout", {
        FillDirection = Enum.FillDirection.Horizontal,
        Parent = self.TabButtons
    })
    
    self.ContentFrame = Create("ScrollingFrame", {
        Name = "Content",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 55),
        Size = UDim2.new(1, 0, 1, -55),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 3,
        Parent = self.MainFrame
    })
    
    Create("UIListLayout", {
        Padding = UDim.new(0, 5),
        Parent = self.ContentFrame
    })
    
    -- Make draggable
    local dragging, dragInput, dragStart, startPos
    self.TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.MainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    self.TitleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            self.MainFrame.Position = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    self.CloseButton.MouseButton1Click:Connect(function()
        self:Destroy()
    end)
    
    self.Tabs = {}
    self.CurrentTab = nil
    
    -- Auto-update features
    coroutine.wrap(function()
        while self.ScreenGui and self.ScreenGui.Parent do
            self:UpdateAllTabs()
            wait(1)
        end
    end)()
    
    return self
end

-- Dynamic tab system
function GuiLibrary:AddTab(name)
    local tab = {}
    
    tab.Button = Create("TextButton", {
        Name = name.."Tab",
        BackgroundColor3 = Theme.Background,
        Size = UDim2.new(0, 70, 1, 0),
        Text = name,
        TextColor3 = Theme.Text,
        Parent = self.TabButtons
    })
    
    tab.Content = Create("Frame", {
        Name = name.."Content",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 0),
        Visible = false,
        Parent = self.ContentFrame
    })
    
    Create("UIListLayout", {
        Padding = UDim.new(0, 5),
        Parent = tab.Content
    })
    
    function tab:Select()
        if self.Gui.CurrentTab then
            self.Gui.CurrentTab.Button.BackgroundColor3 = Theme.Background
            self.Gui.CurrentTab.Content.Visible = false
        end
        self.Button.BackgroundColor3 = Theme.Accent
        self.Content.Visible = true
        self.Gui.CurrentTab = self
    end
    
    tab.Gui = self
    table.insert(self.Tabs, tab)
    
    tab.Button.MouseButton1Click:Connect(function()
        tab:Select()
    end)
    
    if #self.Tabs == 1 then
        tab:Select()
    end
    
    -- Section creator with auto-resizing
    function tab:AddSection(title)
        local section = {}
        
        section.Frame = Create("Frame", {
            Name = title.."Section",
            BackgroundColor3 = Theme.Foreground,
            BorderColor3 = Theme.Border,
            Size = UDim2.new(1, -10, 0, 0),
            Parent = tab.Content
        })
        
        section.Title = Create("TextLabel", {
            Name = "Title",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 20),
            Font = Enum.Font.GothamBold,
            Text = title,
            TextColor3 = Theme.Accent,
            TextSize = 14,
            Parent = section.Frame
        })
        
        section.Content = Create("Frame", {
            Name = "Content",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 0, 0, 25),
            Size = UDim2.new(1, 0, 0, 0),
            Parent = section.Frame
        })
        
        local layout = Create("UIListLayout", {
            Padding = UDim.new(0, 5),
            Parent = section.Content
        })
        
        layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            section.Content.Size = UDim2.new(1, 0, 0, layout.AbsoluteContentSize.Y)
            section.Frame.Size = UDim2.new(1, -10, 0, layout.AbsoluteContentSize.Y + 30)
            self.Gui:UpdateAllTabs()
        end)
        
        -- Button with hover effects
        function section:AddButton(text, callback)
            local btn = Create("TextButton", {
                Name = text.."Button",
                BackgroundColor3 = Theme.Background,
                BorderColor3 = Theme.Border,
                Size = UDim2.new(1, 0, 0, 30),
                Text = text,
                TextColor3 = Theme.Text,
                Parent = section.Content
            })
            
            btn.MouseEnter:Connect(function()
                btn.BackgroundColor3 = Theme.Highlight
            end)
            
            btn.MouseLeave:Connect(function()
                btn.BackgroundColor3 = Theme.Background
            end)
            
            btn.MouseButton1Click:Connect(callback)
            
            return {
                UpdateText = function(newText)
                    btn.Text = newText
                end,
                SetCallback = function(newCallback)
                    btn.MouseButton1Click:Connect(newCallback)
                end
            }
        end
        
        -- Toggle with state management
        function section:AddToggle(text, default, callback)
            local toggle = {
                Value = default or false,
                Update = function(newValue)
                    toggle.Value = newValue
                    btn.Text = newValue and "ON" or "OFF"
                    btn.BackgroundColor3 = newValue and Theme.Accent or Theme.Background
                end
            }
            
            local btn = Create("TextButton", {
                Name = text.."Toggle",
                BackgroundColor3 = toggle.Value and Theme.Accent or Theme.Background,
                BorderColor3 = Theme.Border,
                Size = UDim2.new(1, 0, 0, 30),
                Text = toggle.Value and "ON" or "OFF",
                TextColor3 = Theme.Text,
                Parent = section.Content
            })
            
            btn.MouseButton1Click:Connect(function()
                toggle.Value = not toggle.Value
                btn.Text = toggle.Value and "ON" or "OFF"
                btn.BackgroundColor3 = toggle.Value and Theme.Accent or Theme.Background
                if callback then callback(toggle.Value) end
            end)
            
            return toggle
        end
        
        -- Dynamic slider
        function section:AddSlider(text, min, max, default, callback)
            local slider = {
                Value = math.clamp(default or min, min, max),
                Update = function(newValue)
                    slider.Value = math.clamp(newValue, min, max)
                    fill.Size = UDim2.new((slider.Value - min)/(max - min), 0, 1, 0)
                    valueLabel.Text = text..": "..math.floor(slider.Value)
                end
            }
            
            local frame = Create("Frame", {
                Name = text.."Slider",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 50),
                Parent = section.Content
            })
            
            local valueLabel = Create("TextLabel", {
                Name = "Value",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 20),
                Text = text..": "..slider.Value,
                TextColor3 = Theme.Text,
                Parent = frame
            })
            
            local track = Create("Frame", {
                Name = "Track",
                BackgroundColor3 = Theme.Background,
                BorderColor3 = Theme.Border,
                Position = UDim2.new(0, 0, 0, 25),
                Size = UDim2.new(1, 0, 0, 10),
                Parent = frame
            })
            
            local fill = Create("Frame", {
                Name = "Fill",
                BackgroundColor3 = Theme.Accent,
                Size = UDim2.new((slider.Value - min)/(max - min), 0, 1, 0),
                Parent = track
            })
            
            local button = Create("TextButton", {
                Name = "SliderControl",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 25),
                Size = UDim2.new(1, 0, 0, 10),
                Text = "",
                Parent = frame
            })
            
            local function update(input)
                local pos = UDim2.new(
                    math.clamp((input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X, 0, 1), 
                    0, 0, 0
                )
                slider.Value = math.floor(min + (max - min) * pos.X.Scale)
                fill.Size = UDim2.new(pos.X.Scale, 0, 1, 0)
                valueLabel.Text = text..": "..slider.Value
                if callback then callback(slider.Value) end
            end
            
            button.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    update(input)
                end
            end)
            
            button.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    update(input)
                end
            end)
            
            return slider
        end
        
        return section
    end
    
    return tab
end

-- Auto-resize all tabs
function GuiLibrary:UpdateAllTabs()
    for _, tab in pairs(self.Tabs) do
        local totalHeight = 0
        for _, child in ipairs(tab.Content:GetChildren()) do
            if child:IsA("Frame") then
                totalHeight = totalHeight + child.AbsoluteSize.Y + 5
            end
        end
        tab.Content.CanvasSize = UDim2.new(0, 0, 0, totalHeight)
    end
end

-- Toggle visibility
function GuiLibrary:Toggle()
    self.ScreenGui.Enabled = not self.ScreenGui.Enabled
end

-- Clean destruction
function GuiLibrary:Destroy()
    if self.ScreenGui then
        self.ScreenGui:Destroy()
        self.ScreenGui = nil
    end
end

return GuiLibrary
