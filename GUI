local GuiLibrary = {}
GuiLibrary.__index = GuiLibrary

-- ====== FANTASY THEME CONFIGURATION ======
local Theme = {
    Background = Color3.fromRGB(15, 5, 25),       -- Deep purple-black background
    Foreground = Color3.fromRGB(25, 10, 40),      -- Dark purple sections
    Accent = Color3.fromRGB(140, 30, 220),        -- Vibrant purple accent
    Text = Color3.fromRGB(180, 120, 255),         -- Soft purple text (hybrid purple/blue)
    Border = Color3.fromRGB(60, 20, 90),          -- Dark purple borders
    Highlight = Color3.fromRGB(100, 200, 255),    -- Blue neon highlight
    TabActive = Color3.fromRGB(80, 30, 120),      -- Active tab (darker purple)
    TabInactive = Color3.fromRGB(40, 15, 60),     -- Inactive tab (darkest purple)
    SliderFill = Color3.fromRGB(120, 80, 255),    -- Purple-blue slider fill
    ToggleOn = Color3.fromRGB(100, 200, 255),     -- Blue neon for toggle ON state
    ButtonHover = Color3.fromRGB(70, 30, 110),    -- Purple button hover
    RuneColor = Color3.fromRGB(150, 100, 255)     -- Color for magical runes
}

-- ====== UTILITY FUNCTIONS ======
local function Create(class, properties)
    local instance = Instance.new(class)
    for property, value in pairs(properties) do
        if property ~= "Parent" then
            instance[property] = value
        end
    end
    if properties.Parent then
        instance.Parent = properties.Parent
    end
    return instance
end

local function AddNeonGlow(instance)
    local glow = Instance.new("UIStroke")
    glow.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    glow.Color = Theme.Highlight
    glow.Transparency = 0.7
    glow.Thickness = 1
    glow.LineJoinMode = Enum.LineJoinMode.Round
    glow.Parent = instance
    
    coroutine.wrap(function()
        while glow and glow.Parent do
            for i = 0.7, 0.9, 0.05 do
                glow.Transparency = i
                task.wait(0.1)
            end
            for i = 0.9, 0.7, -0.05 do
                glow.Transparency = i
                task.wait(0.1)
            end
        end
    end)()
    
    return glow
end

local function CreateRune(parent, position, size)
    local rune = Instance.new("ImageLabel")
    rune.Name = "MagicRune"
    rune.Image = "rbxassetid://7733960981"  -- Default rune image
    rune.Size = UDim2.new(0, size, 0, size)
    rune.Position = position
    rune.BackgroundTransparency = 1
    rune.ImageColor3 = Theme.RuneColor
    rune.ImageTransparency = 0.8
    rune.ZIndex = 0
    rune.Parent = parent
    
    spawn(function()
        while rune and rune.Parent do
            for i = 0.8, 0.9, 0.01 do
                rune.ImageTransparency = i
                task.wait(0.05)
            end
            for i = 0.9, 0.8, -0.01 do
                rune.ImageTransparency = i
                task.wait(0.05)
            end
        end
    end)
    
    return rune
end

-- ====== CORE GUI FUNCTIONS ======
function GuiLibrary:Draggable(dragElement, mainElement)
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        mainElement.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X,
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end

    dragElement.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainElement.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    dragElement.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

function GuiLibrary.new(title, config)
    config = config or {}
    local defaultKeybind = Enum.KeyCode.RightControl
    local keybind = config.ToggleKeybind or defaultKeybind
    
    local self = setmetatable({}, GuiLibrary)
    local UserInputService = game:GetService("UserInputService")
    local isMobile = UserInputService.TouchEnabled
    
    -- Platform-specific settings
    local windowSize = isMobile and UDim2.new(0.9, 0, 0.9, 0) or UDim2.new(0, 450, 0, 550)
    local windowPosition = isMobile and UDim2.new(0.05, 0, 0.05, 0) or UDim2.new(0.3, 0, 0.2, 0)
    local tabButtonSize = isMobile and UDim2.new(0, 80, 1, 0) or UDim2.new(0, 110, 1, 0)
    
    -- Create screen GUI
    self.ScreenGui = Create("ScreenGui", {
        Name = "ArcaneGUI",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global,
        Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    })
    
    -- Main window frame with fantasy styling
    self.MainFrame = Create("Frame", {
        Name = "MainWindow",
        BackgroundColor3 = Theme.Background,
        BorderColor3 = Theme.Border,
        BorderSizePixel = 1,
        Position = windowPosition,
        Size = windowSize,
        Parent = self.ScreenGui
    })
    AddNeonGlow(self.MainFrame)
    
    -- Add magical runes to background
    CreateRune(self.MainFrame, UDim2.new(0.1, 0, 0.1, 0), 50)
    CreateRune(self.MainFrame, UDim2.new(0.8, 0, 0.2, 0), 40)
    CreateRune(self.MainFrame, UDim2.new(0.3, 0, 0.7, 0), 60)
    
    -- Title bar
    self.TitleBar = Create("Frame", {
        Name = "TitleBar",
        BackgroundColor3 = Theme.Foreground,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30),
        Parent = self.MainFrame
    })
    AddNeonGlow(self.TitleBar)
    
    -- Title text with special styling
    self.TitleLabel = Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(0.6, -10, 1, 0),
        Font = Enum.Font.GothamSemibold,
        Text = title or "Arcane GUI",
        TextColor3 = Theme.Highlight,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = self.TitleBar
    })
    
    -- Close button
    self.CloseButton = Create("TextButton", {
        Name = "CloseButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -30, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = "✕",
        TextColor3 = Theme.Text,
        TextSize = 16,
        Parent = self.TitleBar
    })
    
    -- Minimize button
    self.MinimizeButton = Create("TextButton", {
        Name = "MinimizeButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -60, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = "─",
        TextColor3 = Theme.Text,
        TextSize = 16,
        Parent = self.TitleBar
    })
    
    -- Tab container
    self.TabContainer = Create("Frame", {
        Name = "TabContainer",
        BackgroundColor3 = Theme.Foreground,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 30),
        Size = UDim2.new(1, 0, 0, 40),
        Parent = self.MainFrame
    })
    AddNeonGlow(self.TabContainer)
    
    -- Tab list layout
    Create("UIListLayout", {
        Name = "TabLayout",
        FillDirection = Enum.FillDirection.Horizontal,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = self.TabContainer
    })
    
    -- Content frame
    self.ContentFrame = Create("ScrollingFrame", {
        Name = "Content",
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 70),
        Size = UDim2.new(1, 0, 1, -70),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 5,
        ScrollBarImageColor3 = Theme.Accent,
        Parent = self.MainFrame
    })
    
    -- Content layout
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10),
        Parent = self.ContentFrame
    })
    
    -- Make window draggable
    self:Draggable(self.TitleBar, self.MainFrame)
    
    -- Button functionality
    self.CloseButton.MouseButton1Click:Connect(function()
        self:Destroy()
    end)
    
    self.MinimizeButton.MouseButton1Click:Connect(function()
        self.ContentFrame.Visible = not self.ContentFrame.Visible
        local newHeight = self.ContentFrame.Visible and (isMobile and 0.9 or 550) or 70
        self.MainFrame.Size = UDim2.new(self.MainFrame.Size.X, UDim.new(0, newHeight))
    end)
    
    -- Keybind functionality
    self.Keybind = keybind
    self.KeybindConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == self.Keybind then
            self:Toggle()
        end
    end)
    
    -- Tab management
    self.Tabs = {}
    self.CurrentTab = nil
    
    return self
end

-- ====== TAB MANAGEMENT ======
function GuiLibrary:AddTab(name)
    local isMobile = game:GetService("UserInputService").TouchEnabled
    local tabButtonSize = isMobile and UDim2.new(0, 80, 1, 0) or UDim2.new(0, 110, 1, 0)
    
    local tab = {}
    
    -- Tab button
    tab.Button = Create("TextButton", {
        Name = "Tab_"..name,
        BackgroundColor3 = Theme.TabInactive,
        BorderSizePixel = 0,
        Size = tabButtonSize,
        Font = Enum.Font.Gotham,
        Text = name,
        TextColor3 = Theme.Text,
        TextSize = 14,
        LayoutOrder = #self.TabContainer:GetChildren(),
        Parent = self.TabContainer
    })
    AddNeonGlow(tab.Button)
    
    -- Tab content frame
    tab.Content = Create("ScrollingFrame", {
        Name = "Content_"..name,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Visible = false,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 5,
        ScrollBarImageColor3 = Theme.Accent,
        Parent = self.ContentFrame
    })
    
    -- Content layout
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10),
        Parent = tab.Content
    })
    
    -- Tab selection function
    function tab:Select()
        if self.Gui.CurrentTab then
            self.Gui.CurrentTab.Button.BackgroundColor3 = Theme.TabInactive
            self.Gui.CurrentTab.Content.Visible = false
        end
        self.Button.BackgroundColor3 = Theme.TabActive
        self.Content.Visible = true
        self.Gui.CurrentTab = self
    end
    
    tab.Gui = self
    table.insert(self.Tabs, tab)
    
    -- Select first tab by default
    if #self.Tabs == 1 then
        tab:Select()
    end
    
    -- Click handler
    tab.Button.MouseButton1Click:Connect(function()
        tab:Select()
    end)
    
    -- Section creation for this tab
    function tab:CreateSection(name)
        local section = {}
        
        section.Frame = Create("Frame", {
            Name = "Section_"..name,
            BackgroundColor3 = Theme.Foreground,
            BorderColor3 = Theme.Border,
            BorderSizePixel = 1,
            Size = UDim2.new(1, -10, 0, 0),
            LayoutOrder = #tab.Content:GetChildren(),
            Parent = tab.Content
        })
        AddNeonGlow(section.Frame)
        
        section.Title = Create("TextLabel", {
            Name = "Title",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 5, 0, 5),
            Size = UDim2.new(1, -10, 0, 20),
            Font = Enum.Font.GothamSemibold,
            Text = name,
            TextColor3 = Theme.Highlight,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = section.Frame
        })
        
        section.Content = Create("Frame", {
            Name = "Content",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 0, 0, 30),
            Size = UDim2.new(1, 0, 0, 0),
            Parent = section.Frame
        })
        
        section.Layout = Create("UIListLayout", {
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 5),
            Parent = section.Content
        })
        
        -- Auto-size section
        section.Layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            section.Content.Size = UDim2.new(1, 0, 0, section.Layout.AbsoluteContentSize.Y)
            section.Frame.Size = UDim2.new(1, -10, 0, section.Layout.AbsoluteContentSize.Y + 35)
            self.Gui:UpdateCanvas(tab)
        end)
        
        -- Label element
        function section:AddLabel(text, options)
            options = options or {}
            local label = Create("TextLabel", {
                Name = "Label",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, options.Height or 20),
                Font = Enum.Font.Gotham,
                Text = text,
                TextColor3 = options.TextColor3 or Theme.Text,
                TextSize = options.TextSize or 14,
                TextWrapped = true,
                TextXAlignment = options.Alignment or Enum.TextXAlignment.Left,
                LayoutOrder = #section.Content:GetChildren(),
                Parent = section.Content
            })
            return label
        end
        
        -- Paragraph element
        function section:AddParagraph(text, options)
            options = options or {}
            local paragraph = Create("TextLabel", {
                Name = "Paragraph",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 0),
                Font = Enum.Font.Gotham,
                Text = text,
                TextColor3 = options.TextColor3 or Theme.Text,
                TextSize = options.TextSize or 12,
                TextWrapped = true,
                TextXAlignment = options.Alignment or Enum.TextXAlignment.Left,
                AutomaticSize = Enum.AutomaticSize.Y,
                LayoutOrder = #section.Content:GetChildren(),
                Parent = section.Content
            })
            return paragraph
        end
        
        -- Button element
        function section:AddButton(name, callback)
            local button = Create("TextButton", {
                Name = "Button_"..name,
                BackgroundColor3 = Theme.Foreground,
                BorderColor3 = Theme.Border,
                BorderSizePixel = 1,
                Size = UDim2.new(1, -10, 0, 30),
                Font = Enum.Font.Gotham,
                Text = name,
                TextColor3 = Theme.Text,
                TextSize = 14,
                LayoutOrder = #section.Content:GetChildren(),
                Parent = section.Content
            })
            
            local buttonGlow = AddNeonGlow(button)
            
            -- Hover effects
            button.MouseEnter:Connect(function()
                button.BackgroundColor3 = Theme.ButtonHover
                buttonGlow.Color = Theme.Highlight
                buttonGlow.Thickness = 2
            end)
            
            button.MouseLeave:Connect(function()
                button.BackgroundColor3 = Theme.Foreground
                buttonGlow.Color = Theme.Accent
                buttonGlow.Thickness = 1
            end)
            
            button.MouseButton1Click:Connect(callback)
            
            return button
        end
        
        -- Toggle element
        function section:AddToggle(name, default, callback)
            local toggle = {}
            local state = default or false
            
            toggle.Frame = Create("Frame", {
                Name = "Toggle_"..name,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 30),
                LayoutOrder = #section.Content:GetChildren(),
                Parent = section.Content
            })
            
            toggle.Label = Create("TextLabel", {
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(0.7, 0, 1, 0),
                Font = Enum.Font.Gotham,
                Text = name,
                TextColor3 = Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = toggle.Frame
            })
            
            toggle.Button = Create("TextButton", {
                Name = "ToggleButton",
                BackgroundColor3 = state and Theme.ToggleOn or Theme.Foreground,
                BorderColor3 = Theme.Border,
                BorderSizePixel = 1,
                Position = UDim2.new(0.7, 0, 0.1, 0),
                Size = UDim2.new(0.3, 0, 0.8, 0),
                Font = Enum.Font.Gotham,
                Text = state and "ON" or "OFF",
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                Parent = toggle.Frame
            })
            
            local toggleGlow = AddNeonGlow(toggle.Button)
            toggleGlow.Color = state and Theme.Highlight or Theme.Accent
            
            toggle.Button.MouseButton1Click:Connect(function()
                state = not state
                toggle.Button.Text = state and "ON" or "OFF"
                toggle.Button.BackgroundColor3 = state and Theme.ToggleOn or Theme.Foreground
                toggleGlow.Color = state and Theme.Highlight or Theme.Accent
                if callback then callback(state) end
            end)
            
            return toggle
        end
        
        -- Slider element
        function section:AddSlider(name, min, max, default, callback)
            local slider = {}
            local value = math.clamp(default or min, min, max)
            local isDragging = false
            local connection
            
            slider.Frame = Create("Frame", {
                Name = "Slider_"..name,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 50),
                LayoutOrder = #section.Content:GetChildren(),
                Parent = section.Content
            })
            
            slider.Label = Create("TextLabel", {
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(1, 0, 0, 20),
                Font = Enum.Font.Gotham,
                Text = name..": "..value,
                TextColor3 = Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = slider.Frame
            })
            
            slider.Track = Create("Frame", {
                Name = "Track",
                BackgroundColor3 = Theme.Foreground,
                BorderColor3 = Theme.Border,
                BorderSizePixel = 1,
                Position = UDim2.new(0, 0, 0, 25),
                Size = UDim2.new(1, 0, 0, 10),
                Parent = slider.Frame
            })
            AddNeonGlow(slider.Track)
            
            slider.Fill = Create("Frame", {
                Name = "Fill",
                BackgroundColor3 = Theme.SliderFill,
                BorderSizePixel = 0,
                Size = UDim2.new((value - min)/(max - min), 0, 1, 0),
                Parent = slider.Track
            })
            
            slider.Button = Create("TextButton", {
                Name = "SliderButton",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 25),
                Size = UDim2.new(1, 0, 0, 10),
                Text = "",
                Parent = slider.Frame
            })
            
            local function updateSlider(input)
                local relativeX
                if input then
                    local mouse = game:GetService("Players").LocalPlayer:GetMouse()
                    relativeX = (mouse.X - slider.Track.AbsolutePosition.X)/slider.Track.AbsoluteSize.X
                else
                    relativeX = (value - min)/(max - min)
                end
                
                value = math.clamp(min + (max - min) * relativeX, min, max)
                local displayValue = math.floor(value * 100)/100
                slider.Label.Text = name..": "..displayValue
                slider.Fill.Size = UDim2.new(math.clamp(relativeX, 0, 1), 0, 1, 0)
                if callback then callback(value) end
            end
            
            local function stopDragging()
                isDragging = false
                if connection then
                    connection:Disconnect()
                    connection = nil
                end
            end
            
            slider.Button.MouseButton1Down:Connect(function()
                isDragging = true
                updateSlider(true)
                connection = game:GetService("RunService").Heartbeat:Connect(function()
                    updateSlider(true)
                end)
            end)
            
            game:GetService("UserInputService").InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    stopDragging()
                end
            end)
            
            slider.Frame.AncestryChanged:Connect(function()
                if not slider.Frame.Parent then
                    stopDragging()
                end
            end)
            
            function slider:SetValue(newValue)
                value = math.clamp(newValue, min, max)
                slider.Label.Text = name..": "..math.floor(value * 100)/100
                slider.Fill.Size = UDim2.new((value - min)/(max - min), 0, 1, 0)
                if callback then callback(value) end
            end
            
            updateSlider(false)
            return slider
        end
        
        -- Input box element
        function section:AddInput(name, placeholder, callback)
            local input = {}
            
            input.Frame = Create("Frame", {
                Name = "Input_"..name,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 30),
                LayoutOrder = #section.Content:GetChildren(),
                Parent = section.Content
            })
            
            input.Label = Create("TextLabel", {
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(0.3, 0, 1, 0),
                Font = Enum.Font.Gotham,
                Text = name,
                TextColor3 = Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = input.Frame
            })
            
            input.Box = Create("TextBox", {
                Name = "InputBox",
                BackgroundColor3 = Theme.Foreground,
                BorderColor3 = Theme.Border,
                BorderSizePixel = 1,
                Position = UDim2.new(0.3, 5, 0.1, 0),
                Size = UDim2.new(0.7, -5, 0.8, 0),
                Font = Enum.Font.Gotham,
                PlaceholderText = placeholder or "",
                Text = "",
                TextColor3 = Theme.Text,
                TextSize = 14,
                Parent = input.Frame
            })
            AddNeonGlow(input.Box)
            
            input.Box.FocusLost:Connect(function(enterPressed)
                if enterPressed and callback then
                    callback(input.Box.Text)
                end
            end)
            
            return input
        end
        
        return section
    end
    
    return tab
end

-- ====== GUI MANAGEMENT FUNCTIONS ======
function GuiLibrary:UpdateCanvas(tab)
    local totalHeight = 0
    for _, child in ipairs(tab.Content:GetChildren()) do
        if child:IsA("Frame") then
            totalHeight += child.AbsoluteSize.Y + 10
        end
    end
    tab.Content.CanvasSize = UDim2.new(0, 0, 0, totalHeight)
end

function GuiLibrary:Toggle()
    self.ScreenGui.Enabled = not self.ScreenGui.Enabled
end

function GuiLibrary:SetKeybind(newKeybind)
    if self.KeybindConnection then
        self.KeybindConnection:Disconnect()
    end
    
    self.Keybind = newKeybind
    local UserInputService = game:GetService("UserInputService")
    
    self.KeybindConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == self.Keybind then
            self:Toggle()
        end
    end)
end

function GuiLibrary:Destroy()
    if self.KeybindConnection then
        self.KeybindConnection:Disconnect()
    end
    self.ScreenGui:Destroy()
end

return GuiLibrary
