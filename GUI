local GuiLibrary = {}
GuiLibrary.__index = GuiLibrary

-- Theme configuration
local Theme = {
    Background = Color3.fromRGB(20, 20, 25),
    Foreground = Color3.fromRGB(30, 30, 35),
    Accent = Color3.fromRGB(150, 50, 255),
    Text = Color3.fromRGB(240, 240, 240),
    Border = Color3.fromRGB(50, 50, 60),
    Highlight = Color3.fromRGB(180, 80, 255)
}

-- Utility functions
local function Create(class, properties)
    local instance = Instance.new(class)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

-- Main window creation
function GuiLibrary.new(title)
    local self = setmetatable({}, GuiLibrary)
    
    -- Detect platform
    local isMobile = game:GetService("UserInputService").TouchEnabled
    
    -- Create screen GUI
    self.ScreenGui = Create("ScreenGui", {
        Name = "CustomGuiLibrary",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global
    })
    
    -- Main window frame
    self.MainFrame = Create("Frame", {
        Name = "MainWindow",
        BackgroundColor3 = Theme.Background,
        BorderColor3 = Theme.Border,
        BorderSizePixel = 1,
        Position = isMobile and UDim2.new(0.1, 0, 0.1, 0) or UDim2.new(0.3, 0, 0.3, 0),
        Size = isMobile and UDim2.new(0.8, 0, 0.8, 0) or UDim2.new(0, 350, 0, 400),
        Parent = self.ScreenGui
    })
    
    -- Title bar
    self.TitleBar = Create("Frame", {
        Name = "TitleBar",
        BackgroundColor3 = Theme.Foreground,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30),
        Parent = self.MainFrame
    })
    
    -- Title text
    self.TitleLabel = Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(0.6, -10, 1, 0),
        Font = Enum.Font.GothamSemibold,
        Text = title or "GUI Window",
        TextColor3 = Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = self.TitleBar
    })
    
    -- Close button
    self.CloseButton = Create("TextButton", {
        Name = "CloseButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -30, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = "X",
        TextColor3 = Theme.Text,
        TextSize = 14,
        Parent = self.TitleBar
    })
    
    -- Minimize button
    self.MinimizeButton = Create("TextButton", {
        Name = "MinimizeButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -60, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = "_",
        TextColor3 = Theme.Text,
        TextSize = 14,
        Parent = self.TitleBar
    })
    
    -- Content area
    self.ContentFrame = Create("ScrollingFrame", {
        Name = "Content",
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 30),
        Size = UDim2.new(1, 0, 1, -30),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 5,
        Parent = self.MainFrame
    })
    
    -- Content layout
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = self.ContentFrame
    })
    
    -- Make window draggable
    self:Draggable(self.TitleBar, self.MainFrame)
    
    -- Button functionality
    self.CloseButton.MouseButton1Click:Connect(function()
        self.ScreenGui:Destroy()
    end)
    
    self.MinimizeButton.MouseButton1Click:Connect(function()
        self.ContentFrame.Visible = not self.ContentFrame.Visible
        local newHeight = self.ContentFrame.Visible and 400 or 30
        self.MainFrame.Size = UDim2.new(self.MainFrame.Size.X, UDim.new(0, newHeight))
    end)
    
    return self
end

-- Draggable window function
function GuiLibrary:Draggable(frame, main)
    local dragging = false
    local dragInput, dragStart, startPos
    
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = main.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

-- Section creation
function GuiLibrary:CreateSection(name)
    local section = {}
    
    section.Frame = Create("Frame", {
        Name = "Section_"..name,
        BackgroundColor3 = Theme.Foreground,
        BorderColor3 = Theme.Border,
        BorderSizePixel = 1,
        Size = UDim2.new(1, -10, 0, 0),
        LayoutOrder = #self.ContentFrame:GetChildren(),
        Parent = self.ContentFrame
    })
    
    section.Title = Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 5, 0, 5),
        Size = UDim2.new(1, -10, 0, 20),
        Font = Enum.Font.GothamSemibold,
        Text = name,
        TextColor3 = Theme.Accent,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section.Frame
    })
    
    section.Content = Create("Frame", {
        Name = "Content",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 30),
        Size = UDim2.new(1, 0, 0, 0),
        Parent = section.Frame
    })
    
    section.Layout = Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = section.Content
    })
    
    -- Auto-size section
    section.Layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        section.Content.Size = UDim2.new(1, 0, 0, section.Layout.AbsoluteContentSize.Y)
        section.Frame.Size = UDim2.new(1, -10, 0, section.Layout.AbsoluteContentSize.Y + 35)
        self:UpdateCanvas()
    end)
    
    -- Label element
    function section:AddLabel(text)
        local label = Create("TextLabel", {
            Name = "Label",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -10, 0, 20),
            Font = Enum.Font.Gotham,
            Text = text,
            TextColor3 = Theme.Text,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            LayoutOrder = #section.Content:GetChildren(),
            Parent = section.Content
        })
        return label
    end
    
    -- Button element
    function section:AddButton(name, callback)
        local button = Create("TextButton", {
            Name = "Button_"..name,
            BackgroundColor3 = Theme.Foreground,
            BorderColor3 = Theme.Border,
            BorderSizePixel = 1,
            Size = UDim2.new(1, -10, 0, 30),
            Font = Enum.Font.Gotham,
            Text = name,
            TextColor3 = Theme.Text,
            TextSize = 14,
            LayoutOrder = #section.Content:GetChildren(),
            Parent = section.Content
        })
        
        -- Hover effects
        button.MouseEnter:Connect(function()
            button.BackgroundColor3 = Theme.Highlight
        end)
        
        button.MouseLeave:Connect(function()
            button.BackgroundColor3 = Theme.Foreground
        end)
        
        button.MouseButton1Click:Connect(callback)
        
        return button
    end
    
    -- Toggle element
    function section:AddToggle(name, default, callback)
        local toggle = {}
        local state = default or false
        
        toggle.Frame = Create("Frame", {
            Name = "Toggle_"..name,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -10, 0, 30),
            LayoutOrder = #section.Content:GetChildren(),
            Parent = section.Content
        })
        
        toggle.Label = Create("TextLabel", {
            Name = "Label",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(0.7, 0, 1, 0),
            Font = Enum.Font.Gotham,
            Text = name,
            TextColor3 = Theme.Text,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = toggle.Frame
        })
        
        toggle.Button = Create("TextButton", {
            Name = "ToggleButton",
            BackgroundColor3 = state and Theme.Accent or Theme.Foreground,
            BorderColor3 = Theme.Border,
            BorderSizePixel = 1,
            Position = UDim2.new(0.7, 0, 0.1, 0),
            Size = UDim2.new(0.3, 0, 0.8, 0),
            Font = Enum.Font.Gotham,
            Text = state and "ON" or "OFF",
            TextColor3 = Theme.Text,
            TextSize = 14,
            Parent = toggle.Frame
        })
        
        toggle.Button.MouseButton1Click:Connect(function()
            state = not state
            toggle.Button.Text = state and "ON" or "OFF"
            toggle.Button.BackgroundColor3 = state and Theme.Accent or Theme.Foreground
            if callback then callback(state) end
        end)
        
        return toggle
    end
    
    -- Slider element
    -- In your GuiLibrary, replace the slider creation code with this:

function section:AddSlider(name, min, max, default, callback)
    local slider = {}
    local value = math.clamp(default or min, min, max)
    local isSliding = false
    
    -- Create slider frame
    slider.Frame = Create("Frame", {
        Name = "Slider_"..name,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -10, 0, 50),
        LayoutOrder = #section.Content:GetChildren(),
        Parent = section.Content
    })

    -- Value display label
    slider.Label = Create("TextLabel", {
        Name = "Label",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 0, 20),
        Font = Enum.Font.Gotham,
        Text = string.format("%s: %.1f", name, value),
        TextColor3 = Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = slider.Frame
    })

    -- Track background
    slider.Track = Create("Frame", {
        Name = "Track",
        BackgroundColor3 = Theme.Foreground,
        BorderColor3 = Theme.Border,
        BorderSizePixel = 1,
        Position = UDim2.new(0, 0, 0, 25),
        Size = UDim2.new(1, 0, 0, 10),
        Parent = slider.Frame
    })

    -- Fill indicator
    slider.Fill = Create("Frame", {
        Name = "Fill",
        BackgroundColor3 = Theme.Accent,
        BorderSizePixel = 0,
        Size = UDim2.new((value - min)/(max - min), 0, 1, 0),
        Parent = slider.Track
    })

    -- Interactive button
    slider.Button = Create("TextButton", {
        Name = "SliderButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 25),
        Size = UDim2.new(1, 0, 0, 10),
        Text = "",
        Parent = slider.Frame
    })

    -- Update slider value and appearance
    local function updateValue(newValue)
        value = math.clamp(newValue, min, max)
        slider.Label.Text = string.format("%s: %.1f", name, value)
        slider.Fill.Size = UDim2.new((value - min)/(max - min), 0, 1, 0)
        if callback then callback(value) end
    end

    -- Handle mouse movement while sliding
    local function onInputChanged(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and isSliding then
            local mouse = game:GetService("Players").LocalPlayer:GetMouse()
            local relativeX = (mouse.X - slider.Track.AbsolutePosition.X)/slider.Track.AbsoluteSize.X
            updateValue(min + (max - min) * relativeX)
        end
    end

    -- Start sliding
    slider.Button.MouseButton1Down:Connect(function()
        isSliding = true
        game:GetService("UserInputService").InputChanged:Connect(onInputChanged)
    end)

    -- Stop sliding on mouse release
    game:GetService("UserInputService").MouseButton1Up:Connect(function()
        if isSliding then
            isSliding = false
        end
    end)

    -- Clean up if slider is removed
    slider.Frame.AncestryChanged:Connect(function()
        if not slider.Frame.Parent then
            isSliding = false
        end
    end)

    return slider
end
    
    -- Input box element
    function section:AddInput(name, placeholder, callback)
        local input = {}
        
        input.Frame = Create("Frame", {
            Name = "Input_"..name,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -10, 0, 30),
            LayoutOrder = #section.Content:GetChildren(),
            Parent = section.Content
        })
        
        input.Label = Create("TextLabel", {
            Name = "Label",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(0.3, 0, 1, 0),
            Font = Enum.Font.Gotham,
            Text = name,
            TextColor3 = Theme.Text,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = input.Frame
        })
        
        input.Box = Create("TextBox", {
            Name = "InputBox",
            BackgroundColor3 = Theme.Foreground,
            BorderColor3 = Theme.Border,
            BorderSizePixel = 1,
            Position = UDim2.new(0.3, 5, 0.1, 0),
            Size = UDim2.new(0.7, -5, 0.8, 0),
            Font = Enum.Font.Gotham,
            PlaceholderText = placeholder or "",
            Text = "",
            TextColor3 = Theme.Text,
            TextSize = 14,
            Parent = input.Frame
        })
        
        input.Box.FocusLost:Connect(function(enterPressed)
            if enterPressed and callback then
                callback(input.Box.Text)
            end
        end)
        
        return input
    end
    
    return section
end

-- Update canvas size
function GuiLibrary:UpdateCanvas()
    local totalHeight = 0
    for _, child in ipairs(self.ContentFrame:GetChildren()) do
        if child:IsA("Frame") then
            totalHeight += child.AbsoluteSize.Y + 5
        end
    end
    self.ContentFrame.CanvasSize = UDim2.new(0, 0, 0, totalHeight)
end

-- Toggle visibility
function GuiLibrary:Toggle()
    self.ScreenGui.Enabled = not self.ScreenGui.Enabled
end

-- Destroy GUI
function GuiLibrary:Destroy()
    self.ScreenGui:Destroy()
end

return GuiLibrary
