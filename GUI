local GuiLibrary = {}
GuiLibrary.__index = GuiLibrary

-- ====== THEME CONFIGURATION ======
local Theme = {
    Background = Color3.fromRGB(15, 5, 25),
    Foreground = Color3.fromRGB(25, 10, 40),
    Accent = Color3.fromRGB(140, 30, 220),
    Text = Color3.fromRGB(180, 120, 255),
    Border = Color3.fromRGB(60, 20, 90),
    Highlight = Color3.fromRGB(100, 200, 255),
    TabActive = Color3.fromRGB(80, 30, 120),
    TabInactive = Color3.fromRGB(40, 15, 60),
    SliderFill = Color3.fromRGB(120, 80, 255),
    ToggleOn = Color3.fromRGB(100, 200, 255),
    ButtonHover = Color3.fromRGB(70, 30, 110),
    DropdownItem = Color3.fromRGB(35, 15, 55),
    RuneColor = Color3.fromRGB(150, 100, 255)
}

-- ====== UTILITY FUNCTIONS ======
local function Create(class, properties)
    local instance = Instance.new(class)
    for property, value in pairs(properties) do
        if property ~= "Parent" then
            instance[property] = value
        end
    end
    if properties.Parent then
        instance.Parent = properties.Parent
    end
    return instance
end

local function AddNeonGlow(instance)
    if not instance then return end
    local glow = Instance.new("UIStroke")
    glow.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    glow.Color = Theme.Highlight
    glow.Transparency = 0.7
    glow.Thickness = 1
    glow.LineJoinMode = Enum.LineJoinMode.Round
    glow.Parent = instance
    
    coroutine.wrap(function()
        while glow and glow.Parent do
            for i = 0.7, 0.9, 0.05 do
                if glow then glow.Transparency = i end
                task.wait(0.1)
            end
            for i = 0.9, 0.7, -0.05 do
                if glow then glow.Transparency = i end
                task.wait(0.1)
            end
        end
    end)()
    
    return glow
end

local function CreateRune(parent, position, size)
    if not parent then return end
    local rune = Instance.new("ImageLabel")
    rune.Name = "MagicRune"
    rune.Image = "rbxassetid://7733960981"
    rune.Size = UDim2.new(0, size, 0, size)
    rune.Position = position
    rune.BackgroundTransparency = 1
    rune.ImageColor3 = Theme.RuneColor
    rune.ImageTransparency = 0.8
    rune.ZIndex = 0
    rune.Parent = parent
    
    spawn(function()
        while rune and rune.Parent do
            for i = 0.8, 0.9, 0.01 do
                if rune then rune.ImageTransparency = i end
                task.wait(0.05)
            end
            for i = 0.9, 0.8, -0.01 do
                if rune then rune.ImageTransparency = i end
                task.wait(0.05)
            end
        end
    end)
    
    return rune
end

-- ====== CORE GUI FUNCTIONS ======
function GuiLibrary:Draggable(dragElement, mainElement)
    if not dragElement or not mainElement then return end
    
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        if not mainElement then return end
        local delta = input.Position - dragStart
        mainElement.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X,
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end

    dragElement.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainElement.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    dragElement.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

function GuiLibrary.new(title, config)
    config = config or {}
    local defaultKeybind = Enum.KeyCode.RightControl
    local keybind = config.ToggleKeybind or defaultKeybind
    
    local self = setmetatable({}, GuiLibrary)
    local UserInputService = game:GetService("UserInputService")
    local isMobile = UserInputService.TouchEnabled
    
    -- Platform-specific settings
    local windowSize = isMobile and UDim2.new(0.9, 0, 0.9, 0) or UDim2.new(0, 450, 0, 550)
    local windowPosition = isMobile and UDim2.new(0.05, 0, 0.05, 0) or UDim2.new(0.3, 0, 0.2, 0)
    local tabButtonSize = isMobile and UDim2.new(0, 80, 1, 0) or UDim2.new(0, 110, 1, 0)
    
    -- Create screen GUI
    self.ScreenGui = Create("ScreenGui", {
        Name = "ArcaneGUI",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global,
        Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    })
    
    if not self.ScreenGui then error("Failed to create ScreenGui") end
    
    -- Main window frame
    self.MainFrame = Create("Frame", {
        Name = "MainWindow",
        BackgroundColor3 = Theme.Background,
        BorderColor3 = Theme.Border,
        BorderSizePixel = 1,
        Position = windowPosition,
        Size = windowSize,
        Parent = self.ScreenGui
    })
    if not self.MainFrame then error("Failed to create MainFrame") end
    AddNeonGlow(self.MainFrame)
    
    -- Add magical runes
    CreateRune(self.MainFrame, UDim2.new(0.1, 0, 0.1, 0), 50)
    CreateRune(self.MainFrame, UDim2.new(0.8, 0, 0.2, 0), 40)
    CreateRune(self.MainFrame, UDim2.new(0.3, 0, 0.7, 0), 60)
    
    -- Title bar
    self.TitleBar = Create("Frame", {
        Name = "TitleBar",
        BackgroundColor3 = Theme.Foreground,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30),
        Parent = self.MainFrame
    })
    if not self.TitleBar then error("Failed to create TitleBar") end
    AddNeonGlow(self.TitleBar)
    
    -- Title text
    self.TitleLabel = Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(0.6, -10, 1, 0),
        Font = Enum.Font.GothamSemibold,
        Text = title or "Arcane GUI",
        TextColor3 = Theme.Highlight,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = self.TitleBar
    })
    
    -- Close button
    self.CloseButton = Create("TextButton", {
        Name = "CloseButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -30, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = "✕",
        TextColor3 = Theme.Text,
        TextSize = 16,
        Parent = self.TitleBar
    })
    
    -- Minimize button
    self.MinimizeButton = Create("TextButton", {
        Name = "MinimizeButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -60, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = "─",
        TextColor3 = Theme.Text,
        TextSize = 16,
        Parent = self.TitleBar
    })
    
    -- Tab container with horizontal scrolling
    self.TabContainerFrame = Create("Frame", {
        Name = "TabContainerFrame",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 30),
        Size = UDim2.new(1, 0, 0, 40),
        Parent = self.MainFrame
    })
    
    self.TabContainer = Create("ScrollingFrame", {
        Name = "TabContainer",
        BackgroundColor3 = Theme.Foreground,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 5,
        ScrollBarImageColor3 = Theme.Accent,
        ScrollBarImageTransparency = 0.7,
        ScrollingDirection = Enum.ScrollingDirection.X,
        Parent = self.TabContainerFrame,
        ClipsDescendants = true
    })
    AddNeonGlow(self.TabContainer)
    
    -- Tab list layout
    self.TabLayout = Create("UIListLayout", {
        Name = "TabLayout",
        FillDirection = Enum.FillDirection.Horizontal,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = self.TabContainer
    })
    
    -- Update tab container size
    self.TabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        if self.TabContainer then
            self.TabContainer.CanvasSize = UDim2.new(0, self.TabLayout.AbsoluteContentSize.X, 0, 0)
        end
    end)
    
    -- Content frame
    self.ContentFrame = Create("ScrollingFrame", {
        Name = "Content",
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 70),
        Size = UDim2.new(1, 0, 1, -70),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 5,
        ScrollBarImageColor3 = Theme.Accent,
        Parent = self.MainFrame
    })
    
    -- Content layout
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10),
        Parent = self.ContentFrame
    })
    
    -- Make window draggable
    self:Draggable(self.TitleBar, self.MainFrame)
    
    -- Button functionality
    self.CloseButton.MouseButton1Click:Connect(function()
        self:Destroy()
    end)
    
    self.MinimizeButton.MouseButton1Click:Connect(function()
        if not self.ContentFrame or not self.TabContainerFrame then return end
        local isMinimized = not self.ContentFrame.Visible
        self.ContentFrame.Visible = not isMinimized
        self.TabContainerFrame.Visible = not isMinimized
        
        if isMinimized then
            self.MainFrame.Size = UDim2.new(self.MainFrame.Size.X, UDim.new(0, 30)) -- Titlebar only
        else
            self.MainFrame.Size = windowSize -- Restore original size
        end
    end)
    
    -- Keybind functionality
    self.Keybind = keybind
    self.KeybindConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == self.Keybind then
            self:Toggle()
        end
    end)
    
    -- Tab management
    self.Tabs = {}
    self.CurrentTab = nil
    
    return self
end

-- ====== TAB MANAGEMENT ======
function GuiLibrary:AddTab(name)
    if not name or not self.TabContainer then return nil end
    
    local isMobile = game:GetService("UserInputService").TouchEnabled
    local tabButtonSize = isMobile and UDim2.new(0, 80, 1, 0) or UDim2.new(0, 110, 1, 0)
    
    local tab = {
        Name = name,
        Gui = self,
        Elements = {}
    }

    -- Create tab button
    tab.Button = Create("TextButton", {
        Name = "Tab_"..name,
        BackgroundColor3 = Theme.TabInactive,
        BorderSizePixel = 0,
        Size = tabButtonSize,
        Font = Enum.Font.Gotham,
        Text = name,
        TextColor3 = Theme.Text,
        TextSize = 14,
        LayoutOrder = #self.TabContainer:GetChildren(),
        Parent = self.TabContainer,
        AutoButtonColor = false
    })
    AddNeonGlow(tab.Button)

    -- Create tab content frame
    tab.Content = Create("ScrollingFrame", {
        Name = "Content_"..name,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Visible = false,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 5,
        ScrollBarImageColor3 = Theme.Accent,
        Parent = self.ContentFrame
    })

    -- Content layout
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10),
        Parent = tab.Content
    })

    -- Tab selection function
    function tab:Select()
        if not self.Gui or not self.Gui.CurrentTab then return end
        if self.Gui.CurrentTab then
            if self.Gui.CurrentTab.Button then
                self.Gui.CurrentTab.Button.BackgroundColor3 = Theme.TabInactive
            end
            if self.Gui.CurrentTab.Content then
                self.Gui.CurrentTab.Content.Visible = false
            end
        end
        if self.Button then
            self.Button.BackgroundColor3 = Theme.TabActive
        end
        if self.Content then
            self.Content.Visible = true
        end
        self.Gui.CurrentTab = self
    end

    tab.Gui = self
    table.insert(self.Tabs, tab)

    -- Select first tab by default
    if #self.Tabs == 1 then
        tab:Select()
    end

    -- Click handler
    if tab.Button then
        tab.Button.MouseButton1Click:Connect(function()
            if tab then tab:Select() end
        end)
    end

    -- Section creation for this tab
    function tab:CreateSection(name)
        if not name or not self.Content then return nil end
        
        local section = {
            Name = name,
            Tab = self,
            Elements = {}
        }
        
        section.Frame = Create("Frame", {
            Name = "Section_"..name,
            BackgroundColor3 = Theme.Foreground,
            BorderColor3 = Theme.Border,
            BorderSizePixel = 1,
            Size = UDim2.new(1, -20, 0, 0),
            LayoutOrder = #self.Content:GetChildren(),
            Parent = self.Content,
            ClipsDescendants = true
        })
        AddNeonGlow(section.Frame)
        
        -- Section padding
        Create("UIPadding", {
            PaddingLeft = UDim.new(0, 10),
            PaddingRight = UDim.new(0, 10),
            PaddingTop = UDim.new(0, 5),
            PaddingBottom = UDim.new(0, 5),
            Parent = section.Frame
        })
        
        -- Section title
        section.Title = Create("TextLabel", {
            Name = "Title",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -10, 0, 20),
            Font = Enum.Font.GothamSemibold,
            Text = name,
            TextColor3 = Theme.Highlight,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = section.Frame
        })
        
        -- Section content area
        section.Content = Create("Frame", {
            Name = "Content",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 0, 0, 25),
            Size = UDim2.new(1, 0, 0, 0),
            Parent = section.Frame
        })
        
        -- Section layout
        section.Layout = Create("UIListLayout", {
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 8),
            Parent = section.Content
        })
        
        -- Auto-size section
        if section.Layout then
            section.Layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                if section.Content and section.Layout and section.Frame then
                    section.Content.Size = UDim2.new(1, 0, 0, section.Layout.AbsoluteContentSize.Y)
                    section.Frame.Size = UDim2.new(1, -20, 0, section.Layout.AbsoluteContentSize.Y + 30)
                    if self.Gui then self.Gui:UpdateCanvas(self) end
                end
            end)
        end
        
        -- BUTTON ELEMENT
        function section:AddButton(name, callback)
            if not name then return nil end
            
            local button = {
                Name = name,
                Callback = callback or function() end,
                Active = true
            }
            
            button.Frame = Create("Frame", {
                Name = "ButtonFrame_"..name,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 30),
                LayoutOrder = #section.Content:GetChildren(),
                Parent = section.Content
            })
            
            button.Button = Create("TextButton", {
                Name = "Button_"..name,
                BackgroundColor3 = Theme.Foreground,
                BorderColor3 = Theme.Border,
                BorderSizePixel = 1,
                Size = UDim2.new(1, 0, 1, 0),
                Font = Enum.Font.Gotham,
                Text = name,
                TextColor3 = Theme.Text,
                TextSize = 14,
                Parent = button.Frame
            })
            
            local buttonGlow = AddNeonGlow(button.Button)
            
            -- Hover effects
            button.Button.MouseEnter:Connect(function()
                if button.Active then
                    button.Button.BackgroundColor3 = Theme.ButtonHover
                    if buttonGlow then
                        buttonGlow.Color = Theme.Highlight
                        buttonGlow.Thickness = 2
                    end
                end
            end)
            
            button.Button.MouseLeave:Connect(function()
                if button.Active then
                    button.Button.BackgroundColor3 = Theme.Foreground
                    if buttonGlow then
                        buttonGlow.Color = Theme.Accent
                        buttonGlow.Thickness = 1
                    end
                end
            end)
            
            button.Button.MouseButton1Click:Connect(function()
                if button.Active and button.Callback then 
                    button.Callback() 
                end
            end)
            
            function button:SetActive(state)
                self.Active = state
                self.Button.BackgroundColor3 = state and Theme.Foreground or Color3.fromRGB(50, 50, 50)
                self.Button.TextColor3 = state and Theme.Text or Color3.fromRGB(100, 100, 100)
            end
            
            function button:SetText(newText)
                if self.Button then
                    self.Button.Text = newText or ""
                end
            end
            
            function button:SetCallback(newCallback)
                if newCallback then
                    self.Callback = newCallback
                end
            end
            
            table.insert(self.Elements, button)
            return button
        end
        
        -- TOGGLE ELEMENT
        function section:AddToggle(name, default, callback)
            if not name then return nil end
            
            local toggle = {
                Value = default or false,
                Callback = callback or function() end,
                Active = true
            }
            
            toggle.Frame = Create("Frame", {
                Name = "Toggle_"..name,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 30),
                LayoutOrder = #section.Content:GetChildren(),
                Parent = section.Content
            })
            
            toggle.Label = Create("TextLabel", {
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(0.7, 0, 1, 0),
                Font = Enum.Font.Gotham,
                Text = name,
                TextColor3 = Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = toggle.Frame
            })
            
            toggle.Button = Create("TextButton", {
                Name = "ToggleButton",
                BackgroundColor3 = toggle.Value and Theme.ToggleOn or Theme.Foreground,
                BorderColor3 = Theme.Border,
                BorderSizePixel = 1,
                Position = UDim2.new(0.7, 0, 0.1, 0),
                Size = UDim2.new(0.3, 0, 0.8, 0),
                Font = Enum.Font.Gotham,
                Text = toggle.Value and "ON" or "OFF",
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                Parent = toggle.Frame
            })
            
            local toggleGlow = AddNeonGlow(toggle.Button)
            if toggleGlow then
                toggleGlow.Color = toggle.Value and Theme.Highlight or Theme.Accent
            end
            
            function toggle:SetValue(value, noCallback)
                if type(value) ~= "boolean" then return end
                self.Value = value
                if self.Button then
                    self.Button.Text = self.Value and "ON" or "OFF"
                    self.Button.BackgroundColor3 = self.Value and Theme.ToggleOn or Theme.Foreground
                    if toggleGlow then
                        toggleGlow.Color = self.Value and Theme.Highlight or Theme.Accent
                    end
                end
                if not noCallback and self.Callback then 
                    self.Callback(self.Value) 
                end
            end
            
            function toggle:SetActive(state)
                self.Active = state
                if self.Button then
                    self.Button.BackgroundColor3 = state and (self.Value and Theme.ToggleOn or Theme.Foreground) or Color3.fromRGB(50, 50, 50)
                    self.Button.TextColor3 = state and Color3.new(1, 1, 1) or Color3.fromRGB(100, 100, 100)
                end
            end
            
            if toggle.Button then
                toggle.Button.MouseButton1Click:Connect(function()
                    if toggle.Active then
                        toggle:SetValue(not toggle.Value)
                    end
                end)
            end
            
            table.insert(self.Elements, toggle)
            return toggle
        end
        
        -- SLIDER ELEMENT
        function section:AddSlider(name, min, max, default, callback)
            if not name or not min or not max then return nil end
            
            local slider = {
                Min = min,
                Max = max,
                Value = math.clamp(default or min, min, max),
                Callback = callback or function() end,
                Active = true
            }
            
            slider.Frame = Create("Frame", {
                Name = "Slider_"..name,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 50),
                LayoutOrder = #section.Content:GetChildren(),
                Parent = section.Content
            })
            
            slider.Label = Create("TextLabel", {
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(1, 0, 0, 20),
                Font = Enum.Font.Gotham,
                Text = string.format("%s: %.2f", name, slider.Value),
                TextColor3 = Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = slider.Frame
            })
            
            slider.Track = Create("Frame", {
                Name = "Track",
                BackgroundColor3 = Theme.Foreground,
                BorderColor3 = Theme.Border,
                BorderSizePixel = 1,
                Position = UDim2.new(0, 0, 0, 25),
                Size = UDim2.new(1, 0, 0, 10),
                Parent = slider.Frame
            })
            AddNeonGlow(slider.Track)
            
            slider.Fill = Create("Frame", {
                Name = "Fill",
                BackgroundColor3 = Theme.SliderFill,
                BorderSizePixel = 0,
                Size = UDim2.new((slider.Value - slider.Min)/(slider.Max - slider.Min), 0, 1, 0),
                Parent = slider.Track
            })
            
            slider.Button = Create("TextButton", {
                Name = "SliderButton",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 25),
                Size = UDim2.new(1, 0, 0, 10),
                Text = "",
                Parent = slider.Frame
            })
            
            local function updateSlider(input)
                if not slider.Active or not slider.Track then return end
                local relativeX = (input.Position.X - slider.Track.AbsolutePosition.X)/slider.Track.AbsoluteSize.X
                slider.Value = math.clamp(slider.Min + (slider.Max - slider.Min) * relativeX, slider.Min, slider.Max)
                if slider.Label then
                    slider.Label.Text = string.format("%s: %.2f", name, slider.Value)
                end
                if slider.Fill then
                    slider.Fill.Size = UDim2.new(math.clamp(relativeX, 0, 1), 0, 1, 0)
                end
                if slider.Callback then 
                    slider.Callback(slider.Value) 
                end
            end
            
            if slider.Button then
                slider.Button.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 and slider.Active then
                        updateSlider(input)
                        local connection
                        connection = game:GetService("RunService").Heartbeat:Connect(function()
                            updateSlider(game:GetService("UserInputService"):GetMouseLocation())
                        end)
                        
                        local function endDrag(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                connection:Disconnect()
                            end
                        end
                        
                        game:GetService("UserInputService").InputEnded:Connect(endDrag)
                    end
                end)
            end
            
            function slider:SetValue(value, noCallback)
                if not value then return end
                self.Value = math.clamp(value, self.Min, self.Max)
                if self.Label then
                    self.Label.Text = string.format("%s: %.2f", name, self.Value)
                end
                if self.Fill then
                    self.Fill.Size = UDim2.new((self.Value - self.Min)/(self.Max - self.Min), 0, 1, 0)
                end
                if not noCallback and self.Callback then 
                    self.Callback(self.Value) 
                end
            end
            
            function slider:SetActive(state)
                self.Active = state
                if self.Track then
                    self.Track.BackgroundColor3 = state and Theme.Foreground or Color3.fromRGB(50, 50, 50)
                end
                if self.Fill then
                    self.Fill.BackgroundColor3 = state and Theme.SliderFill or Color3.fromRGB(80, 80, 80)
                end
                if self.Label then
                    self.Label.TextColor3 = state and Theme.Text or Color3.fromRGB(100, 100, 100)
                end
            end
            
            function slider:SetRange(newMin, newMax)
                if not newMin or not newMax then return end
                self.Min = newMin
                self.Max = newMax
                self:SetValue(math.clamp(self.Value, newMin, newMax), true)
            end
            
            table.insert(self.Elements, slider)
            return slider
        end
        
        -- INPUT BOX ELEMENT
        function section:AddInput(name, placeholder, callback)
            if not name then return nil end
            
            local input = {
                Callback = callback or function() end,
                Active = true
            }
            
            input.Frame = Create("Frame", {
                Name = "Input_"..name,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 30),
                LayoutOrder = #section.Content:GetChildren(),
                Parent = section.Content
            })
            
            input.Label = Create("TextLabel", {
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(0.3, 0, 1, 0),
                Font = Enum.Font.Gotham,
                Text = name,
                TextColor3 = Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = input.Frame
            })
            
            input.Box = Create("TextBox", {
                Name = "InputBox",
                BackgroundColor3 = Theme.Foreground,
                BorderColor3 = Theme.Border,
                BorderSizePixel = 1,
                Position = UDim2.new(0.3, 5, 0.1, 0),
                Size = UDim2.new(0.7, -5, 0.8, 0),
                Font = Enum.Font.Gotham,
                PlaceholderText = placeholder or "",
                Text = "",
                TextColor3 = Theme.Text,
                TextSize = 14,
                Parent = input.Frame
            })
            AddNeonGlow(input.Box)
            
            if input.Box then
                input.Box.FocusLost:Connect(function(enterPressed)
                    if enterPressed and input.Active and input.Callback then
                        input.Callback(input.Box.Text)
                    end
                end)
            end
            
            function input:SetText(text)
                if self.Box then
                    self.Box.Text = text or ""
                end
            end
            
            function input:SetPlaceholder(text)
                if self.Box then
                    self.Box.PlaceholderText = text or ""
                end
            end
            
            function input:SetActive(state)
                self.Active = state
                if self.Box then
                    self.Box.BackgroundColor3 = state and Theme.Foreground or Color3.fromRGB(50, 50, 50)
                    self.Box.TextColor3 = state and Theme.Text or Color3.fromRGB(100, 100, 100)
                end
                if self.Label then
                    self.Label.TextColor3 = state and Theme.Text or Color3.fromRGB(100, 100, 100)
                end
            end
            
            table.insert(self.Elements, input)
            return input
        end
        
        -- DROPDOWN ELEMENT
        function section:AddDropdown(name, options, default, callback)
            if not name or not options or #options == 0 then return nil end
            
            local dropdown = {
                Options = options,
                Selected = default or options[1],
                Callback = callback or function() end,
                Open = false,
                Active = true
            }
            
            dropdown.Frame = Create("Frame", {
                Name = "Dropdown_"..name,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 30),
                LayoutOrder = #section.Content:GetChildren(),
                Parent = section.Content,
                ClipsDescendants = true
            })
            
            dropdown.Label = Create("TextLabel", {
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(0.4, 0, 1, 0),
                Font = Enum.Font.Gotham,
                Text = name,
                TextColor3 = Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = dropdown.Frame
            })
            
            dropdown.MainButton = Create("TextButton", {
                Name = "MainButton",
                BackgroundColor3 = Theme.Foreground,
                BorderColor3 = Theme.Border,
                BorderSizePixel = 1,
                Position = UDim2.new(0.4, 0, 0, 0),
                Size = UDim2.new(0.6, 0, 1, 0),
                Font = Enum.Font.Gotham,
                Text = dropdown.Selected,
                TextColor3 = Theme.Text,
                TextSize = 14,
                Parent = dropdown.Frame
            })
            AddNeonGlow(dropdown.MainButton)
            
            dropdown.OptionsFrame = Create("Frame", {
                Name = "OptionsFrame",
                BackgroundColor3 = Theme.Foreground,
                BorderColor3 = Theme.Border,
                BorderSizePixel = 1,
                Position = UDim2.new(0.4, 0, 1, 5),
                Size = UDim2.new(0.6, 0, 0, 0),
                Visible = false,
                Parent = dropdown.Frame
            })
            AddNeonGlow(dropdown.OptionsFrame)
            
            dropdown.OptionsLayout = Create("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 1),
                Parent = dropdown.OptionsFrame
            })
            
            -- Create option buttons
            local function createOptionButtons()
                -- Clear existing options
                if dropdown.OptionsFrame then
                    for _, child in ipairs(dropdown.OptionsFrame:GetChildren()) do
                        if child:IsA("TextButton") then
                            child:Destroy()
                        end
                    end
                end
                
                -- Create new options
                for i, option in ipairs(dropdown.Options) do
                    local optionButton = Create("TextButton", {
                        Name = "Option_"..option,
                        BackgroundColor3 = Theme.DropdownItem,
                        BorderSizePixel = 0,
                        Size = UDim2.new(1, 0, 0, 25),
                        Font = Enum.Font.Gotham,
                        Text = option,
                        TextColor3 = Theme.Text,
                        TextSize = 14,
                        LayoutOrder = i,
                        Parent = dropdown.OptionsFrame
                    })
                    
                    optionButton.MouseButton1Click:Connect(function()
                        if dropdown.Active then
                            dropdown.Selected = option
                            if dropdown.MainButton then
                                dropdown.MainButton.Text = option
                            end
                            dropdown.Open = false
                            if dropdown.OptionsFrame then
                                dropdown.OptionsFrame.Visible = false
                            end
                            if dropdown.Frame then
                                dropdown.Frame.Size = UDim2.new(1, -10, 0, 30)
                            end
                            if dropdown.Callback then
                                dropdown.Callback(option)
                            end
                        end
                    end)
                    
                    -- Hover effect
                    optionButton.MouseEnter:Connect(function()
                        if dropdown.Active then
                            optionButton.BackgroundColor3 = Theme.ButtonHover
                        end
                    end)
                    
                    optionButton.MouseLeave:Connect(function()
                        optionButton.BackgroundColor3 = Theme.DropdownItem
                    end)
                end
                
                -- Update options frame size
                if dropdown.OptionsFrame then
                    dropdown.OptionsFrame.Size = UDim2.new(0.6, 0, 0, #dropdown.Options * 26)
                end
            end
            
            createOptionButtons()
            
            -- Toggle dropdown
            if dropdown.MainButton then
                dropdown.MainButton.MouseButton1Click:Connect(function()
                    if dropdown.Active then
                        dropdown.Open = not dropdown.Open
                        if dropdown.OptionsFrame then
                            dropdown.OptionsFrame.Visible = dropdown.Open
                        end
                        
                        if dropdown.Open and dropdown.Frame then
                            dropdown.Frame.Size = UDim2.new(1, -10, 0, 30 + (#dropdown.Options * 26) + 5)
                        elseif dropdown.Frame then
                            dropdown.Frame.Size = UDim2.new(1, -10, 0, 30)
                        end
                    end
                end)
            end
            
            function dropdown:UpdateOptions(newOptions, newDefault)
                if not newOptions or #newOptions == 0 then return end
                self.Options = newOptions
                self.Selected = newDefault or newOptions[1]
                if self.MainButton then
                    self.MainButton.Text = self.Selected
                end
                createOptionButtons()
            end
            
            function dropdown:SetSelected(option)
                if not option or not table.find(self.Options, option) then return end
                self.Selected = option
                if self.MainButton then
                    self.MainButton.Text = option
                end
                if self.Callback then
                    self.Callback(option)
                end
            end
            
            function dropdown:SetActive(state)
                self.Active = state
                if self.MainButton then
                    self.MainButton.BackgroundColor3 = state and Theme.Foreground or Color3.fromRGB(50, 50, 50)
                    self.MainButton.TextColor3 = state and Theme.Text or Color3.fromRGB(100, 100, 100)
                end
                if self.Label then
                    self.Label.TextColor3 = state and Theme.Text or Color3.fromRGB(100, 100, 100)
                end
            end
            
            table.insert(self.Elements, dropdown)
            return dropdown
        end
        
        -- LABEL ELEMENT
        function section:AddLabel(text, options)
            if not text then return nil end
            options = options or {}
            
            local label = Create("TextLabel", {
                Name = "Label_"..text,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, options.Height or 20),
                Font = Enum.Font.Gotham,
                Text = text,
                TextColor3 = options.TextColor3 or Theme.Text,
                TextSize = options.TextSize or 14,
                TextWrapped = true,
                TextXAlignment = options.Alignment or Enum.TextXAlignment.Left,
                LayoutOrder = #section.Content:GetChildren(),
                Parent = section.Content
            })
            
            function label:SetText(newText)
                if self then
                    self.Text = newText or ""
                end
            end
            
            function label:SetColor(color)
                if self and color then
                    self.TextColor3 = color
                end
            end
            
            table.insert(self.Elements, label)
            return label
        end
        
        table.insert(self.Elements, section)
        return section
    end
    
    return tab
end

-- ====== GUI MANAGEMENT FUNCTIONS ======
function GuiLibrary:UpdateCanvas(tab)
    if not tab or not tab.Content then return end
    local totalHeight = 0
    for _, child in ipairs(tab.Content:GetChildren()) do
        if child:IsA("Frame") then
            totalHeight += child.AbsoluteSize.Y + 10
        end
    end
    tab.Content.CanvasSize = UDim2.new(0, 0, 0, totalHeight)
end

function GuiLibrary:Toggle()
    if self.ScreenGui then
        self.ScreenGui.Enabled = not self.ScreenGui.Enabled
    end
end

function GuiLibrary:SetKeybind(newKeybind)
    if self.KeybindConnection then
        self.KeybindConnection:Disconnect()
    end
    
    self.Keybind = newKeybind
    local UserInputService = game:GetService("UserInputService")
    
    self.KeybindConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == self.Keybind then
            self:Toggle()
        end
    end)
end

function GuiLibrary:Destroy()
    if self.KeybindConnection then
        self.KeybindConnection:Disconnect()
    end
    if self.ScreenGui then
        self.ScreenGui:Destroy()
    end
end

return GuiLibrary
