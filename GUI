local GuiLibrary = {}
GuiLibrary.__index = GuiLibrary

-- ====== FANTASY THEME CONFIGURATION ======
local Theme = {
    Background = Color3.fromRGB(15, 5, 25),
    Foreground = Color3.fromRGB(25, 10, 40),
    Accent = Color3.fromRGB(140, 30, 220),
    Text = Color3.fromRGB(180, 120, 255),
    Border = Color3.fromRGB(60, 20, 90),
    Highlight = Color3.fromRGB(100, 200, 255),
    TabActive = Color3.fromRGB(80, 30, 120),
    TabInactive = Color3.fromRGB(40, 15, 60),
    SliderFill = Color3.fromRGB(120, 80, 255),
    ToggleOn = Color3.fromRGB(100, 200, 255),
    ButtonHover = Color3.fromRGB(70, 30, 110),
    RuneColor = Color3.fromRGB(150, 100, 255),
    Padding = {
        Section = 12,
        Element = 8,
        Text = 5
    }
}

-- ====== UTILITY FUNCTIONS ======
local function Create(class, properties)
    local instance = Instance.new(class)
    for property, value in pairs(properties) do
        if property ~= "Parent" then
            instance[property] = value
        end
    end
    if properties.Parent then
        instance.Parent = properties.Parent
    end
    return instance
end

local function AddNeonGlow(instance)
    local glow = Instance.new("UIStroke")
    glow.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    glow.Color = Theme.Highlight
    glow.Transparency = 0.7
    glow.Thickness = 1
    glow.LineJoinMode = Enum.LineJoinMode.Round
    glow.Parent = instance
    
    coroutine.wrap(function()
        while glow and glow.Parent do
            for i = 0.7, 0.9, 0.05 do
                glow.Transparency = i
                task.wait(0.1)
            end
            for i = 0.9, 0.7, -0.05 do
                glow.Transparency = i
                task.wait(0.1)
            end
        end
    end)()
    
    return glow
end

local function CreateRune(parent, position, size)
    local rune = Create("ImageLabel", {
        Name = "MagicRune",
        Image = "rbxassetid://7733960981",
        Size = UDim2.new(0, size, 0, size),
        Position = position,
        BackgroundTransparency = 1,
        ImageColor3 = Theme.RuneColor,
        ImageTransparency = 0.8,
        ZIndex = 0,
        Parent = parent
    })
    
    spawn(function()
        while rune and rune.Parent do
            for i = 0.8, 0.9, 0.01 do
                rune.ImageTransparency = i
                task.wait(0.05)
            end
            for i = 0.9, 0.8, -0.01 do
                rune.ImageTransparency = i
                task.wait(0.05)
            end
        end
    end)
    
    return rune
end

-- ====== CORE GUI FUNCTIONS ======
function GuiLibrary:Draggable(dragElement, mainElement)
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        mainElement.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X,
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end

    dragElement.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainElement.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    dragElement.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

function GuiLibrary.new(title, config)
    config = config or {}
    local defaultKeybind = Enum.KeyCode.RightControl
    local keybind = config.ToggleKeybind or defaultKeybind
    
    local self = setmetatable({}, GuiLibrary)
    local UserInputService = game:GetService("UserInputService")
    local isMobile = UserInputService.TouchEnabled
    
    -- Platform-specific settings
    local windowSize = isMobile and UDim2.new(0.9, 0, 0.9, 0) or UDim2.new(0, 450, 0, 550)
    local windowPosition = isMobile and UDim2.new(0.05, 0, 0.05, 0) or UDim2.new(0.3, 0, 0.2, 0)
    local tabButtonSize = isMobile and UDim2.new(0, 80, 1, 0) or UDim2.new(0, 110, 1, 0)
    
    -- Create screen GUI
    self.ScreenGui = Create("ScreenGui", {
        Name = "ArcaneGUI",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global,
        Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    })
    
    -- Main window frame with fantasy styling
    self.MainFrame = Create("Frame", {
        Name = "MainWindow",
        BackgroundColor3 = Theme.Background,
        BorderColor3 = Theme.Border,
        BorderSizePixel = 1,
        Position = windowPosition,
        Size = windowSize,
        Parent = self.ScreenGui
    })
    AddNeonGlow(self.MainFrame)
    
    -- Add magical runes to background
    CreateRune(self.MainFrame, UDim2.new(0.1, 0, 0.1, 0), 50)
    CreateRune(self.MainFrame, UDim2.new(0.8, 0, 0.2, 0), 40)
    CreateRune(self.MainFrame, UDim2.new(0.3, 0, 0.7, 0), 60)
    
    -- Title bar
    self.TitleBar = Create("Frame", {
        Name = "TitleBar",
        BackgroundColor3 = Theme.Foreground,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30),
        Parent = self.MainFrame
    })
    AddNeonGlow(self.TitleBar)
    
    -- Title text with special styling
    self.TitleLabel = Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(0.6, -10, 1, 0),
        Font = Enum.Font.GothamSemibold,
        Text = title or "Arcane GUI",
        TextColor3 = Theme.Highlight,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = self.TitleBar
    })
    
    -- Close button
    self.CloseButton = Create("TextButton", {
        Name = "CloseButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -30, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = "✕",
        TextColor3 = Theme.Text,
        TextSize = 16,
        Parent = self.TitleBar
    })
    
    -- Minimize button
    self.MinimizeButton = Create("TextButton", {
        Name = "MinimizeButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -60, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = "─",
        TextColor3 = Theme.Text,
        TextSize = 16,
        Parent = self.TitleBar
    })
    
    -- Tab container
    self.TabContainerFrame = Create("Frame", {
        Name = "TabContainerFrame",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 30),
        Size = UDim2.new(1, 0, 0, 40),
        Parent = self.MainFrame
    })
    
    self.TabContainer = Create("ScrollingFrame", {
        Name = "TabContainer",
        BackgroundColor3 = Theme.Foreground,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 5,
        ScrollBarImageColor3 = Theme.Accent,
        ScrollBarImageTransparency = 0.7,
        ScrollingDirection = Enum.ScrollingDirection.X,
        Parent = self.TabContainerFrame,
        ClipsDescendants = true
    })
    AddNeonGlow(self.TabContainer)
    
    -- Tab list layout
    self.TabLayout = Create("UIListLayout", {
        Name = "TabLayout",
        FillDirection = Enum.FillDirection.Horizontal,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = self.TabContainer
    })
    
    -- Update tab container size when tabs are added
    self.TabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        self.TabContainer.CanvasSize = UDim2.new(0, self.TabLayout.AbsoluteContentSize.X, 0, 0)
    end)
    
    -- Content frame
    self.ContentFrame = Create("ScrollingFrame", {
        Name = "Content",
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 70),
        Size = UDim2.new(1, 0, 1, -70),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 5,
        ScrollBarImageColor3 = Theme.Accent,
        Parent = self.MainFrame
    })
    
    -- Content layout
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10),
        Parent = self.ContentFrame
    })
    
    -- Make window draggable
    self:Draggable(self.TitleBar, self.MainFrame)
    
    -- Button functionality
    self.CloseButton.MouseButton1Click:Connect(function()
        self:Destroy()
    end)
    
    self.MinimizeButton.MouseButton1Click:Connect(function()
        local isMinimized = not self.ContentFrame.Visible
        self.ContentFrame.Visible = not isMinimized
        self.TabContainerFrame.Visible = not isMinimized
        
        if isMinimized then
            self.MainFrame.Size = UDim2.new(self.MainFrame.Size.X, UDim.new(0, 30)) -- Titlebar only
        else
            self.MainFrame.Size = windowSize -- Restore original size
        end
    end)
    
    -- Keybind functionality
    self.Keybind = keybind
    self.KeybindConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == self.Keybind then
            self:Toggle()
        end
    end)
    
    -- Tab management
    self.Tabs = {}
    self.CurrentTab = nil
    
    return self
end

-- ====== TAB MANAGEMENT ======
function GuiLibrary:AddTab(name)
    local isMobile = game:GetService("UserInputService").TouchEnabled
    local tabButtonSize = isMobile and UDim2.new(0, 80, 1, 0) or UDim2.new(0, 110, 1, 0)
    
    local tab = {
        Name = name,
        Gui = self,
        Elements = {}
    }

    -- Create tab button
    tab.Button = Create("TextButton", {
        Name = "Tab_"..name,
        BackgroundColor3 = Theme.TabInactive,
        BorderSizePixel = 0,
        Size = tabButtonSize,
        Font = Enum.Font.Gotham,
        Text = name,
        TextColor3 = Theme.Text,
        TextSize = 14,
        LayoutOrder = #self.TabContainer:GetChildren(),
        Parent = self.TabContainer,
        AutoButtonColor = false
    })
    AddNeonGlow(tab.Button)

    -- Create tab content frame
    tab.Content = Create("ScrollingFrame", {
        Name = "Content_"..name,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Visible = false,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 5,
        ScrollBarImageColor3 = Theme.Accent,
        Parent = self.ContentFrame
    })

    -- Content layout
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10),
        Parent = tab.Content
    })

    -- Tab selection function
    function tab:Select()
        if self.Gui.CurrentTab then
            self.Gui.CurrentTab.Button.BackgroundColor3 = Theme.TabInactive
            self.Gui.CurrentTab.Content.Visible = false
        end
        self.Button.BackgroundColor3 = Theme.TabActive
        self.Content.Visible = true
        self.Gui.CurrentTab = self
    end

    tab.Gui = self
    table.insert(self.Tabs, tab)

    -- Select first tab by default
    if #self.Tabs == 1 then
        tab:Select()
    end

    -- Click handler
    tab.Button.MouseButton1Click:Connect(function()
        tab:Select()
    end)

    -- Section creation for this tab
    function tab:CreateSection(name)
        local section = {}
        
        section.Frame = Create("Frame", {
            Name = "Section_"..name,
            BackgroundColor3 = Theme.Foreground,
            BorderColor3 = Theme.Border,
            BorderSizePixel = 1,
            Size = UDim2.new(1, -20, 0, 0),
            LayoutOrder = #tab.Content:GetChildren(),
            Parent = tab.Content,
            ClipsDescendants = true
        })
        AddNeonGlow(section.Frame)
        
        -- Add padding to section
        Create("UIPadding", {
            PaddingLeft = UDim.new(0, 10),
            PaddingRight = UDim.new(0, 10),
            Parent = section.Frame
        })
        
        section.Title = Create("TextLabel", {
            Name = "Title",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 5, 0, 5),
            Size = UDim2.new(1, -10, 0, 20),
            Font = Enum.Font.GothamSemibold,
            Text = name,
            TextColor3 = Theme.Highlight,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = section.Frame
        })
        
        section.Content = Create("Frame", {
            Name = "Content",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 0, 0, 30),
            Size = UDim2.new(1, 0, 0, 0),
            Parent = section.Frame
        })
        
        section.Layout = Create("UIListLayout", {
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 5),
            Parent = section.Content
        })
        
        -- Auto-size section
        section.Layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            section.Content.Size = UDim2.new(1, 0, 0, section.Layout.AbsoluteContentSize.Y)
            section.Frame.Size = UDim2.new(1, -20, 0, section.Layout.AbsoluteContentSize.Y + 35)
            self.Gui:UpdateCanvas(tab)
        end)
        
        -- Label element
        function section:AddLabel(text)
            local label = Create("TextLabel", {
                Name = "Label",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 20),
                Font = Enum.Font.Gotham,
                Text = text,
                TextColor3 = Theme.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = self.Content
            })
            
            return label
        end
        
        -- Button element
        function section:AddButton(text, callback)
            local button = Create("TextButton", {
                Name = "Button",
                BackgroundColor3 = Theme.Foreground,
                BorderColor3 = Theme.Border,
                BorderSizePixel = 1,
                Size = UDim2.new(1, -10, 0, 30),
                Font = Enum.Font.Gotham,
                Text = text,
                TextColor3 = Theme.Text,
                TextSize = 14,
                Parent = self.Content
            })
            AddNeonGlow(button)
            
            -- Hover effects
            button.MouseEnter:Connect(function()
                game:GetService("TweenService"):Create(
                    button,
                    TweenInfo.new(0.1),
                    {BackgroundColor3 = Theme.ButtonHover}
                ):Play()
            end)
            
            button.MouseLeave:Connect(function()
                game:GetService("TweenService"):Create(
                    button,
                    TweenInfo.new(0.1),
                    {BackgroundColor3 = Theme.Foreground}
                ):Play()
            end)
            
            button.MouseButton1Click:Connect(function()
                callback()
            end)
            
            return button
        end
        
        -- Toggle element (fixed implementation)
        function section:AddToggle(text, default, callback)
            local toggle = {
                Value = default or false,
                Callback = callback or function() end
            }
            
            local toggleFrame = Create("Frame", {
                Name = "ToggleFrame",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -Theme.Padding.Section, 0, 30),
                Parent = self.Content
            })

            -- Toggle label
            local label = Create("TextLabel", {
                Name = "Label",
                BackgroundTransparency = 1,
                Size = UDim2.new(0.7, 0, 1, 0),
                Position = UDim2.new(0, 0, 0, 0),
                Text = text,
                TextColor3 = Theme.Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = toggleFrame
            })

            -- Toggle button container
            local toggleButton = Create("TextButton", {
                Name = "ToggleButton",
                BackgroundColor3 = Theme.Foreground,
                BorderColor3 = Theme.Border,
                BorderSizePixel = 1,
                Size = UDim2.new(0, 50, 0, 24),
                Position = UDim2.new(1, -5, 0.5, 0),
                AnchorPoint = Vector2.new(1, 0.5),
                AutoButtonColor = false,
                Text = "",
                Parent = toggleFrame
            })
            AddNeonGlow(toggleButton)

            -- Toggle indicator (the circle that moves)
            local toggleIndicator = Create("Frame", {
                Name = "Indicator",
                BackgroundColor3 = Theme.ToggleOn,
                Size = UDim2.new(0, 20, 0, 20),
                Position = UDim2.new(0, 2, 0.5, 0),
                AnchorPoint = Vector2.new(0, 0.5),
                Parent = toggleButton
            })
            AddNeonGlow(toggleIndicator)

            -- Function to update toggle visual state
            local function updateToggle()
                if toggle.Value then
                    -- ON state (indicator on right)
                    game:GetService("TweenService"):Create(
                        toggleIndicator,
                        TweenInfo.new(0.2),
                        {
                            Position = UDim2.new(1, -22, 0.5, 0),
                            BackgroundColor3 = Theme.ToggleOn
                        }
                    ):Play()
                else
                    -- OFF state (indicator on left)
                    game:GetService("TweenService"):Create(
                        toggleIndicator,
                        TweenInfo.new(0.2),
                        {
                            Position = UDim2.new(0, 2, 0.5, 0),
                            BackgroundColor3 = Color3.fromRGB(150, 150, 150)
                        }
                    ):Play()
                end
            end

            -- Set initial state
            updateToggle()

            -- Click handler
            toggleButton.MouseButton1Click:Connect(function()
                toggle.Value = not toggle.Value
                updateToggle()
                toggle.Callback(toggle.Value)
            end)

            -- Public method to set toggle state
            function toggle:SetValue(value)
                toggle.Value = value
                updateToggle()
                toggle.Callback(value)
            end

            return toggle
        end
        
        -- Slider element
        function section:AddSlider(text, min, max, default, callback)
            local slider = {
                Value = default or min,
                Min = min,
                Max = max,
                Callback = callback or function() end
            }
            
            local sliderFrame = Create("Frame", {
                Name = "Slider",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 50),
                Parent = self.Content
            })
            
            local label = Create("TextLabel", {
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(1, 0, 0, 20),
                Font = Enum.Font.Gotham,
                Text = text,
                TextColor3 = Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = sliderFrame
            })
            
            local valueLabel = Create("TextLabel", {
                Name = "Value",
                BackgroundTransparency = 1,
                Position = UDim2.new(1, 0, 0, 0),
                AnchorPoint = Vector2.new(1, 0),
                Size = UDim2.new(0.3, 0, 0, 20),
                Font = Enum.Font.Gotham,
                Text = tostring(default or min),
                TextColor3 = Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Right,
                Parent = sliderFrame
            })
            
            local sliderTrack = Create("Frame", {
                Name = "Track",
                BackgroundColor3 = Theme.Foreground,
                BorderColor3 = Theme.Border,
                BorderSizePixel = 1,
                Position = UDim2.new(0, 0, 1, -20),
                AnchorPoint = Vector2.new(0, 1),
                Size = UDim2.new(1, 0, 0, 10),
                Parent = sliderFrame
            })
            AddNeonGlow(sliderTrack)
            
            local sliderFill = Create("Frame", {
                Name = "Fill",
                BackgroundColor3 = Theme.SliderFill,
                Size = UDim2.new(0, 0, 1, 0),
                Parent = sliderTrack
            })
            AddNeonGlow(sliderFill)
            
            local sliderButton = Create("TextButton", {
                Name = "SliderButton",
                BackgroundColor3 = Theme.Accent,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0.5, 0),
                AnchorPoint = Vector2.new(0, 0.5),
                Size = UDim2.new(0, 15, 0, 15),
                Text = "",
                AutoButtonColor = false,
                Parent = sliderTrack
            })
            AddNeonGlow(sliderButton)
            
            -- Set initial position
            local function updateSlider(value)
                local percent = (value - min) / (max - min)
                sliderFill.Size = UDim2.new(percent, 0, 1, 0)
                sliderButton.Position = UDim2.new(percent, 0, 0.5, 0)
                valueLabel.Text = tostring(math.floor(value))
            end
            
            updateSlider(slider.Value)
            
            -- Dragging logic
            local dragging = false
            
            local function updateValue(input)
                local x = (input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X
                x = math.clamp(x, 0, 1)
                local value = math.floor(min + (max - min) * x)
                
                if value ~= slider.Value then
                    slider.Value = value
                    updateSlider(value)
                    slider.Callback(value)
                end
            end
            
            sliderButton.MouseButton1Down:Connect(function()
                dragging = true
            end)
            
            game:GetService("UserInputService").InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            game:GetService("UserInputService").InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    updateValue(input)
                end
            end)
            
            sliderTrack.MouseButton1Down:Connect(function(input)
                updateValue(input)
            end)
            
            -- Function to set value programmatically
            function slider:SetValue(value)
                value = math.clamp(value, min, max)
                slider.Value = value
                updateSlider(value)
                slider.Callback(value)
            end
            
            return slider
        end
        
        -- Dropdown element
function section:AddDropdown(text, config)
	config = config or {}
	local dropdown = {
		Name = text,
		Values = config.Values or {},
		Value = config.Default or (config.Multi and {} or nil),
		Multi = config.Multi or false,
		Callback = config.Callback or function() end,
		AllowNull = config.AllowNull or false
	}

	-- Main dropdown button
	dropdown.Button = Create("TextButton", {
		Name = "DropdownButton",
		BackgroundColor3 = Theme.Foreground,
		BorderColor3 = Theme.Border,
		BorderSizePixel = 1,
		Size = UDim2.new(1, -10, 0, 32),
		Text = "",
		AutoButtonColor = false,
		Parent = self.Content
	})
	AddNeonGlow(dropdown.Button)

	-- Display text
	dropdown.Display = Create("TextLabel", {
		BackgroundTransparency = 1,
		Position = UDim2.new(0, 10, 0, 0),
		Size = UDim2.new(1, -30, 1, 0),
		Font = Enum.Font.Gotham,
		Text = text,
		TextColor3 = Theme.Text,
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = dropdown.Button
	})

	-- Dropdown icon
	dropdown.Icon = Create("ImageLabel", {
		Image = "rbxassetid://7733960981",
		Size = UDim2.new(0, 16, 0, 16),
		Position = UDim2.new(1, -20, 0.5, 0),
		AnchorPoint = Vector2.new(0, 0.5),
		BackgroundTransparency = 1,
		ImageColor3 = Theme.Text,
		Parent = dropdown.Button
	})

	-- List Frame
	dropdown.ListFrame = Create("Frame", {
		Name = "DropdownList",
		BackgroundColor3 = Theme.Foreground,
		BorderColor3 = Theme.Border,
		Size = UDim2.new(1, -10, 0, 0),
		ClipsDescendants = true,
		Visible = false,
		ZIndex = 10,
		Parent = self.Gui.MainFrame
	})
	AddNeonGlow(dropdown.ListFrame)

	-- Scrollable list
	dropdown.ScrollingFrame = Create("ScrollingFrame", {
		BackgroundTransparency = 1,
		Size = UDim2.new(1, 0, 1, 0),
		CanvasSize = UDim2.new(0, 0, 0, 0),
		ScrollBarThickness = 5,
		ScrollBarImageColor3 = Theme.Accent,
		Parent = dropdown.ListFrame
	})
	dropdown.ListLayout = Create("UIListLayout", {
		SortOrder = Enum.SortOrder.LayoutOrder,
		Padding = UDim.new(0, 5),
		Parent = dropdown.ScrollingFrame
	})

	function dropdown:UpdateDisplay()
		local text = ""

		if self.Multi then
			for k, v in pairs(self.Value) do
				if v then
					text = text .. k .. ", "
				end
			end
			self.Display.Text = text == "" and "None selected" or text:sub(1, -3)
		else
			self.Display.Text = self.Value or "Select."
		end
	end

	function dropdown:BuildOptions()
		for _, c in pairs(self.ScrollingFrame:GetChildren()) do
			if c:IsA("TextButton") then
				c:Destroy()
			end
		end

		for _, value in ipairs(self.Values) do
			local option = Create("TextButton", {
				Text = value,
				TextSize = 13,
				TextXAlignment = Enum.TextXAlignment.Left,
				Font = Enum.Font.Gotham,
				BackgroundColor3 = Theme.Foreground,
				TextColor3 = Theme.Text,
				Size = UDim2.new(1, -10, 0, 28),
				Parent = self.ScrollingFrame,
				AutoButtonColor = false
			})

			option.MouseButton1Click:Connect(function()
				if self.Multi then
					self.Value[value] = not self.Value[value]
				else
					if self.Value == value and self.AllowNull then
						self.Value = nil
					else
						self.Value = value
						self:Close()
					end
				end
				self:UpdateDisplay()
				self.Callback(self.Value)
			end)
		end

		task.wait()
		self.ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, self.ListLayout.AbsoluteContentSize.Y)
	end

	function dropdown:Open()
		if self.ListFrame.Visible then return end
		local pos = self.Button.AbsolutePosition
		local root = self.Gui.MainFrame.AbsolutePosition
		self.ListFrame.Position = UDim2.new(0, pos.X - root.X, 0, pos.Y - root.Y + self.Button.AbsoluteSize.Y + 5)
		self.ListFrame.Visible = true
		self.ListFrame.Size = UDim2.new(1, -10, 0, math.min(self.ListLayout.AbsoluteContentSize.Y, 200))
	end

	function dropdown:Close()
		self.ListFrame.Visible = false
	end

	function dropdown:Toggle()
		if self.ListFrame.Visible then
			self:Close()
		else
			self:Open()
		end
	end

	dropdown.Button.MouseButton1Click:Connect(function()
		dropdown:Toggle()
	end)

	dropdown:BuildOptions()
	dropdown:UpdateDisplay()

	return dropdown
end


        
        -- Text input element
function section:AddInput(placeholder, default, callback)
	local input = {
		Value = default or "",
		Callback = callback or function() end
	}

	local frame = Create("Frame", {
		Size = UDim2.new(1, -10, 0, 30),
		BackgroundTransparency = 1,
		Parent = self.Content
	})

	local box = Create("TextBox", {
		Size = UDim2.new(1, 0, 1, 0),
		BackgroundColor3 = Theme.Foreground,
		BorderColor3 = Theme.Border,
		BorderSizePixel = 1,
		Font = Enum.Font.Gotham,
		Text = default or "",
		PlaceholderText = placeholder or "",
		TextColor3 = Theme.Text,
		TextSize = 14,
		Parent = frame
	})
	AddNeonGlow(box)

	box.FocusLost:Connect(function()
		input.Value = box.Text
		input.Callback(input.Value)
	end)

	function input:SetValue(val)
		input.Value = val
		box.Text = val
	end

	return input
end


-- ====== GUI MANAGEMENT FUNCTIONS ======
function GuiLibrary:UpdateCanvas(tab)
    tab.Content.CanvasSize = UDim2.new(0, 0, 0, tab.Content.UIListLayout.AbsoluteContentSize.Y + 20)
end

function GuiLibrary:Toggle()
    self.MainFrame.Visible = not self.MainFrame.Visible
end

function GuiLibrary:SetKeybind(key)
    if self.KeybindConnection then
        self.KeybindConnection:Disconnect()
    end
    
    self.Keybind = key
    self.KeybindConnection = game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == self.Keybind then
            self:Toggle()
        end
    end)
end

function GuiLibrary:Destroy()
    if self.KeybindConnection then
        self.KeybindConnection:Disconnect()
    end
    self.ScreenGui:Destroy()
end

return GuiLibrary
